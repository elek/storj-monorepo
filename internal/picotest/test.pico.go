// Code generated by protoc-gen-pico. DO NOT EDIT.
// source: test.proto
//
// versions:
//     protoc-gen-pico: (devel)
//     protoc:          v3.19.1

package picotest

import (
	picobuf "storj.io/picobuf"
)

type Basic struct {
	Byte0        int32
	Byte1        int32
	Byte100      int32
	Byte255      int32
	StringEmpty  string
	StringHello  string
	BytesZero    []byte
	BytesNumbers []byte
}

func (m *Basic) Picobuf(c *picobuf.Codec) bool {
	if m == nil {
		return false
	}
	c.Int32(1, &m.Byte0)
	c.Int32(2, &m.Byte1)
	c.Int32(3, &m.Byte100)
	c.Int32(4, &m.Byte255)
	c.String(5, &m.StringEmpty)
	c.String(6, &m.StringHello)
	c.Bytes(7, &m.BytesZero)
	c.Bytes(8, &m.BytesNumbers)
	return true
}

type Person struct {
	Name    string
	Address *Address
}

func (m *Person) Picobuf(c *picobuf.Codec) bool {
	if m == nil {
		return false
	}
	c.String(1, &m.Name)
	c.Message(2,
		func() { m.Address = new(Address) },
		func(c *picobuf.Codec) bool {
			return m.Address.Picobuf(c)
		},
	)
	return true
}

type Address struct {
	Street string
}

func (m *Address) Picobuf(c *picobuf.Codec) bool {
	if m == nil {
		return false
	}
	c.String(1, &m.Street)
	return true
}

type AllTypes struct {
	Int32    int32
	Int64    int64
	Uint32   uint32
	Uint64   uint64
	Sint32   int32
	Sint64   int64
	Fixed32  uint32
	Fixed64  uint64
	Sfixed32 int32
	Sfixed64 int64
	Float    float32
	Double   float64
	Bool     bool
	String_  string
	Bytes    []byte
	Message  *Message
}

func (m *AllTypes) Picobuf(c *picobuf.Codec) bool {
	if m == nil {
		return false
	}
	c.Int32(1, &m.Int32)
	c.Int64(2, &m.Int64)
	c.Uint32(3, &m.Uint32)
	c.Uint64(4, &m.Uint64)
	c.Sint32(5, &m.Sint32)
	c.Sint64(6, &m.Sint64)
	c.Fixed32(7, &m.Fixed32)
	c.Fixed64(8, &m.Fixed64)
	c.Sfixed32(9, &m.Sfixed32)
	c.Sfixed64(10, &m.Sfixed64)
	c.Float(11, &m.Float)
	c.Double(12, &m.Double)
	c.Bool(13, &m.Bool)
	c.String(14, &m.String_)
	c.Bytes(15, &m.Bytes)
	c.Message(16,
		func() { m.Message = new(Message) },
		func(c *picobuf.Codec) bool {
			return m.Message.Picobuf(c)
		},
	)
	return true
}

type Message struct {
	Int32 int32
}

func (m *Message) Picobuf(c *picobuf.Codec) bool {
	if m == nil {
		return false
	}
	c.Int32(1, &m.Int32)
	return true
}
